# frozen_string_literal: true

module FinishedGoodsApp
  TitanAddendumPayloadSchema = Dry::Schema.JSON do
    required(:eCertRequired).filled(:bool)
    required(:cbrid).filled(:integer)
    required(:cbrBillingID).filled(:integer)
    required(:requestId).filled(:string, max_size?: 25)
    required(:eCertAgreementCode).filled(:string, max_size?: 10)
    required(:exporterCode).filled(:string, max_size?: 10)
    required(:consignorName).filled(:string)
    required(:consignorAddressLine1).maybe(:string)
    required(:consignorAddressLine2).maybe(:string)
    required(:consignorAddressLine3).maybe(:string)
    required(:consigneeId).filled(:string)
    required(:consigneeName).filled(:string)
    required(:consigneeAddressLine1).maybe(:string)
    required(:consigneeAddressLine2).maybe(:string)
    required(:consigneeAddressLine3).maybe(:string)
    required(:consigneeCountryId).filled(:string)
    required(:importCountryId).filled(:string)
    required(:cfCode).filled(:string, max_size?: 10)
    required(:lspCode).filled(:string, max_size?: 10)
    required(:transportType).filled(:string, included_in?: %w[MARINE RAIL ROAD AIR MAIL MULTIMODAL FIXED_TRANSPORT_INSTALLATION INLAND_WATER_TRANSPORT])
    required(:vesselName).filled(:string, max_size?: 50)
    required(:vesselType).filled(:string, max_size?: 15)
    required(:voyageNumber).filled(:string, max_size?: 15)
    required(:regimeCode).maybe(:string, max_size?: 10)
    required(:shippingBookingReference).filled(:string, max_size?: 20)
    required(:loadPort).filled(:string, max_size?: 5)
    required(:dischargePort).filled(:string, max_size?: 5)
    required(:shippedTargetCountry).filled(:string, max_size?: 2)
    required(:shippedTargetRegion).filled(:string, max_size?: 3)
    required(:locationOfIssue).filled(:string, max_size?: 4)
    required(:eCertDesiredIssueLocation).maybe(:string)
    required(:estimatedDepartureDate).filled(:string, format?: /\d\d\d\d-\d\d-\d\d/)
    required(:supportingDocuments).maybe(:array)

    required(:consignmentItems).array(:hash) do
      required(:CommonName).filled(:string)
      required(:ScientificName).filled(:string)
      required(:nettWeightMeasureCode).filled(:string)
      required(:nettWeightMeasure).filled(:decimal)
      required(:grossWeightMeasureCode).filled(:string)
      required(:grossWeightMeasure).filled(:decimal)
      required(:customsHarmonizedSystemClass).maybe(:string)
      required(:commodityVegetableClass).filled(:string)
      required(:commodityConditionClass).maybe(:string)
      required(:commodityIntentOfUseClass).maybe(:string)
      required(:appliedProcessStartDate).maybe(:string)
      required(:appliedProcessEndDate).maybe(:string)
      required(:durationMeasureCode).maybe(:string)
      required(:durationMeasure).maybe(:string)
      required(:appliedProcessTreatmentTypeLevel1).maybe(:string)
      required(:appliedProcessTreatmentTypeLevel2).maybe(:string)
      required(:appliedProcessChemicalCode).maybe(:string)
      required(:fullTreatmentInfromation).maybe(:string)
      required(:appliedProcessTemperatureUnitCode).maybe(:string)
      required(:appliedProcessTemperature).filled(:decimal)
      required(:appliedProcessConcentrationUnitCode).maybe(:string)
      required(:appliedProcessConcentration).filled(:decimal)
      required(:appliedProcessAdditionalNotes).maybe(:string)
      required(:packageLevelCode).filled(:integer)
      required(:packageTypeCode).filled(:string)
      required(:packageItemUnitCode).filled(:string)
      required(:packageItemQuantity).filled(:integer)
      required(:packageShippingMarks).maybe(:string)
      required(:additionalConsignmentNotes).maybe(:string)
    end

    required(:addendumDetails).array(:hash) do
      required(:stuffLoadDate).filled(:string, format?: /\d\d\d\d-\d\d-\d\d/)
      required(:loadPointFboCode).filled(:string, max_size?: 7)
      required(:consignmentNumber).filled(:string, max_size?: 10)
      required(:phc).filled(:string, max_size?: 6)
      required(:inspectedSSCC).filled(:string, max_size?: 18)
      required(:clientRef).filled(:string)
      required(:upn).filled(:string, max_size?: 30)
      required(:inspectedTargetRegion).filled(:string, max_size?: 3)
      required(:inspectedTargetCountry).maybe(:string, max_size?: 2)
      required(:commodityCode).filled(:string, max_size?: 2)
      required(:fleshColour).maybe(:string, max_size?: 20)
      required(:varietyCode).filled(:string, max_size?: 3)
      required(:protocolExceptionIndicator).maybe(:string, max_size?: 2)
      required(:productClass).filled(:string, max_size?: 7)
      required(:nettWeight).filled(:decimal)
      required(:grossWeight).filled(:decimal)
      required(:cartonQuantity).filled(:integer)
      required(:inspectionPoint).filled(:string, max_size?: 10)
      required(:inspectorCode).filled(:string, max_size?: 5)
      required(:inspectionDate).filled(:string, format?: /\d\d\d\d-\d\d-\d\d/)
      required(:containerNumber).filled(:string, max_size?: 11)
      required(:addendumDetailLines).array(:hash) do
        required(:sequenceNumberOfInspectedSSCC).filled(:integer)
        required(:puc).filled(:string, max_size?: 7)
        required(:orchard).filled(:string, max_size?: 10)
        required(:productionArea).filled(:string, max_size?: 30)
        required(:phytoData).maybe(:string, max_size?: 10)
        required(:sizeCountBerrySize).filled(:string, max_size?: 5)
        required(:packCode).filled(:string, max_size?: 4)
        required(:palletQuantity).filled(:integer)
        required(:nettPalletWeight).filled(:decimal)
      end
    end

    required(:flexiFields).maybe(:array)
  end
end
