<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <%= csrf_metatag %>

    <title><%= AppConst::APP_CAPTION %> ROBOT</title>

    <!-- FAVICON start -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    <!-- FAVICON end -->

    <link rel="stylesheet" href="/css/jackbox.css">
    <link rel="stylesheet" href="/css/tachyons.min.css">
    <link rel="stylesheet" href="/css/sweetalert2.min.css">

    <style>
     div.robotBase {
       /* grid-template-areas: left left right right; */
       /*
           display: grid;
      grid-gap: 10px;
      grid-template-columns: repeat(4, [col] 350px ) ;
      grid-template-rows: repeat(2, [row] auto  );
      background-color: #fff;
      color: #444;
      */
     }
     div.robotLoginWidget {
       /*
       grid-area: loginWidget;
       */
     }
     div.robotStatsWidget {
       /*
       grid-area: statsWidget;
       */
     }
     div.robotLeft {
       /*
       width: 30em;
       grid-column: col / span 1;
      grid-row: row;
      */
       /* grid-area: left; */
     }
     div.robotRight {
       /*
       grid-column: col 2 / span 3;
      grid-row: row;
      */
       /* grid-area: right; */
     }

     [data-scale-reading="empty"] {
       color: white;
     }

     [data-scale-reading="filled"] {
       color: gray;
     }



      .cbl-icon {
        display: inline-block;
        height: 1em;
        width: 1em;
        fill: currentColor;
        position: relative;
        top: .125em;
      }
      input:focus {
        border-bottom-color: darkcyan;
      }
      input:required {
        border-right: thick solid orange;
      }
      select:required {
        border-right: thick solid orange;
      }
      input.cbl-to-upper {
        text-transform: uppercase;
      }
      .disableClick{
        pointer-events: none;
      }
      .focusLabel {
        color: darkcyan;
      }
      .brown {
        color: #a52a2a;
      }
      table.rmd-table {
        border-collapse: collapse;
      }
      tr.hover-row:hover {
        background-color: #90EE90;
        color: #000000;
      }
      th {
        font-weight: normal;
      }
      th.rmd-table-cell {
        border: thin solid gray;
        font-weight: bold;
        color: #777;
      }
      td.rmd-table-cell {
        border: thin solid gray;
        color: #777;
        padding: 4px;
      }
      .crossbeams-warning-note {
        margin-top: 0.5em;
        padding: 0.2em;
        border: thin solid olive;
        color: white;
        background-color: #FFC107;
      }

      .crossbeams-error-note {
        margin-top: 0.5em;
        padding: 0.2em;
        border: thin solid brown;
        color: brown;
        background-color: #fee;
      }

      .crossbeams-success-note p, .crossbeams-info-note p, .crossbeams-warning-note p, .crossbeams-error-note p {
        margin: 0.2em;
      }

      .rmdScanFieldGRoup {
        display: flex;
      }
      /* Look at clipboard button in Layout for styling... */
      .rmdScanFieldGRoup input {
        flex: 1;
      }
      .rmdScanFieldGRoup button {
        color: #107FB7;
      }
      .rmdLeds {
        display: flex;
        justify-content: space-around;
      }

      .rmdLedLight {
        height: 2em;
        width: 6em;
        margin: 1em;
      }

      /* Animate the RMD WiFi icon when a form is submitted without internet connection: */
      .wifiWait {
        animation: pulse 2s infinite;
        -webkit-animation: pulse 2s infinite;
      }
      @keyframes pulse {
        0% {
          fill: #001F3F;
          transform: scale(0.3);
        }
        50% {
          fill: #FF4136;
        }
        100% {
          fill: #FF0000;
          transform: scale(1.5);
        }
      }
      @-webkit-keyframes pulse {
        0% {
          fill: #001F3F;
          transform: scale(0.3);
        }
        50% {
          fill: #FF4136;
        }
        100% {
          fill: #FF0000;
          transform: scale(1.5);
        }
      }

      /* ----------------------------------------- */
      /* --- START TOGGLE (CHECKBOX) COMPONENT --- */
      /* ----------------------------------------- */
      /* The switch - the box around the slider */
      .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
      }

      /* Hide default HTML checkbox */
      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      /* The slider */
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
      }

      .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
      }

      input:checked + .slider {
        background-color: #357edd;
      }

      input:focus + .slider {
        box-shadow: 0 0 1px #357edd;
      }

      input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
      }

      /* Rounded sliders */
      .slider.round {
        border-radius: 34px;
      }

      .slider.round:before {
        border-radius: 50%;
      }
      /* --------------------------------------- */
      /* --- END TOGGLE (CHECKBOX) COMPONENT --- */
      /* --------------------------------------- */
    </style>
    <%= content_for :late_head %>
  </head>
  <body class="site" data-utf-8-ensurer="Ðž">
    <div id="rmd-offline-status" class="navy bg-washed-blue ba b--light-blue pa3 mw6 br3" style="display:none">
      <p class="ma0"><svg id="wifiIcon" class="w2 h2 mr2" width="2048" height="1792" viewBox="0 0 2048 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1024 1523q-20 0-93-73.5t-73-93.5q0-32 62.5-54t103.5-22 103.5 22 62.5 54q0 20-73 93.5t-93 73.5zm270-271q-2 0-40-25t-101.5-50-128.5-25-128.5 25-101 50-40.5 25q-18 0-93.5-75t-75.5-93q0-13 10-23 78-77 196-121t233-44 233 44 196 121q10 10 10 23 0 18-75.5 93t-93.5 75zm273-272q-11 0-23-8-136-105-252-154.5t-268-49.5q-85 0-170.5 22t-149 53-113.5 62-79 53-31 22q-17 0-92-75t-75-93q0-12 10-22 132-132 320-205t380-73 380 73 320 205q10 10 10 22 0 18-75 93t-92 75zm271-271q-11 0-22-9-179-157-371.5-236.5t-420.5-79.5-420.5 79.5-371.5 236.5q-11 9-22 9-17 0-92.5-75t-75.5-93q0-13 10-23 187-186 445-288t527-102 527 102 445 288q10 10 10 23 0 18-75.5 93t-92.5 75z"/></svg>
      <strong>Offline</strong><br><span id="offlineMsg">You are currently offline. Please check network settings and re-connect.</span></p>
    </div>
    <div id="container" class="container">
      <%= yield %>
    </div>
    <script src="/js/jackbox.min.js"></script>
    <script src="/js/crossbeams-error.js"></script>
    <script src="/js/crossbeams-local-storage.js"></script>
    <script src="/js/crossbeams-utils.js?seq=32"></script>
    <script src="/js/crossbeams-layout.js?seq=23"></script>
    <script src="/js/crossbeams-rmd_scan.js?seq=25" type="text/javascript"></script>
    <script src="/js/sweetalert2.min.js" type="text/javascript"></script>
    <script src="/js/message-bus.js?seq=1"></script>
    <script src="/js/message-bus-ajax.js"></script>
    <script>
      const device = '<%= @robot_page.instance[:device] %>';
      const startLoginKey = '<%= @robot_page.instance[:login_key] %>';
      const no_buttons = <%= @robot_page.instance[:buttons].length %>;
      let deviceStore = crossbeamsLocalStorage.getItem(device);
      if (!deviceStore || deviceStore.loginKey !== startLoginKey) {
        deviceStore = {
          button_stats: Array(no_buttons).fill(0),
          no_packers: <%= @robot_page.instance[:users].length %>,
          loginKey: startLoginKey,
        };
        crossbeamsLocalStorage.setItem(device, deviceStore);
      }
      const robotActivityLog = document.getElementById('robotActivityLog') || document.createElement('div');
      const scaleWeight = document.getElementById('scaleWeight') || document.createElement('div');
      const robotStatsWidget = document.getElementById('robotStatsWidget') || document.createElement('div');

      const recalcStats = () => {
        const tot = deviceStore.button_stats.reduce((a, b) => a + b, 0);
        let ave;
        if (deviceStore.no_packers === 0) {
          ave = 0;
        } else {
          ave = (tot / deviceStore.no_packers).toLocaleString('en-US', { maximumFractionDigits: 2 });
        }
        robotStatsWidget.innerHTML = `${deviceStore.button_stats.map((u, i) => {
          const letter = String.fromCharCode(i + 65);
          return `<div class="dib ml3 mt2 pa3 br2 ba f4"><span class="mid-gray">${letter}:</span> ${u}</div>`;
        }).join("\n")}
        <div class="dib ml3 mt2 pa3 br2 ba f4"><span class="mid-gray">Total:</span> ${tot}</div>
        <div class="dib ml3 mt2 pa3 br2 ba f4"><span class="mid-gray">Avg:</span> ${ave}</div>`
      };

      const logActivity = (text, logLevel) => {
        const li = document.createElement("li");
        li.append(document.createTextNode(text.toString().replace('An error occurred: ', '')));
        if (logLevel && logLevel == 'warning' || logLevel == 'error') {
          const cls = document.createAttribute('class');
          if (logLevel == 'warning') {
            cls.value = 'orange';
          } else {
            cls.value = 'red';
          }
          li.setAttributeNode(cls);
        }
        robotActivityLog.prepend(li);
      };

      Jackbox.init();
      // Polyfill for old robot browsers...
      if (window.NodeList && !NodeList.prototype.forEach) {
        NodeList.prototype.forEach = Array.prototype.forEach;
      }

      // MessageBus handling --- START
      MessageBus.baseUrl = "/terminus/";

      // @message_bus_client_id
      MessageBus.subscribe("/terminus", function(msg){
        console.log('MSG', msg);
        if (!msg.targetDevice) {
          return;
        }
        if (msg.targetDevice && msg.targetDevice !== device) {
          return;
        }
        if (msg.actions) {
          msg.actions.forEach((action) => {
            if (action.toggle_classes) {
              console.log('CLASS', action.toggle_classes.id);
            } else if (action.set_inner_value) {
              console.log('HTML', action.set_inner_value.id);
            } else if (action.reload_page) {
              console.log('RELOAD', action.reload_page);
            } else {
              console.log('UNKNOWN', action);
            }
          });
        }
        if (msg.payload) {
          msg.payload.forEach((action) => {
            const btn = document.getElementById(`button_${action.button_id}`);
            const cap = document.getElementById(`button_${action.button_id}_caption`);
            if (btn) {
              if (action.enabled) {
                 btn.classList.add('dim', 'near-black');
                 btn.style.backgroundColor = btn.dataset.backColour;
                 btn.disabled = false;
                 cap.innerHTML = action.caption;
               } else {
                 btn.classList.remove('dim', 'near-black');
                 btn.style.backgroundColor = null;
                 btn.disabled = true;
                 cap.innerHTML = 'Not allocated';
               }
            }
          });
        }

        if (msg.message) {
          switch (msg.messageType) {
            case 'warning':
              crossbeamsUtils.showWarning(msg.message);
              return;
            case 'success':
              crossbeamsUtils.showSuccess(msg.message);
              return;
            case 'error':
              crossbeamsUtils.showError(msg.message);
              return;
            default:
              crossbeamsUtils.showInformation(msg.message);
          }
        }
      });
      // MessageBus handling --- END

      // Highlight label text for inputs that have focus.
      document.addEventListener('focus', function (event) {
        const prev = event.target.parentNode && event.target.parentNode.previousElementSibling;
        if (prev instanceof HTMLTableCellElement) { prev.classList.add('focusLabel'); }
      }, true);
      document.addEventListener('blur', function (event) {
        const prev = event.target.parentNode && event.target.parentNode.previousElementSibling;
        if (prev instanceof HTMLTableCellElement) { prev.classList.remove('focusLabel'); }
      }, true);

      document.addEventListener('click', function (event) {
        if (!event.target.dataset || !event.target.dataset.buttonActionUrl) { return; }
        // if scale required...
        if (scaleWeight.textContent === '.') {
          logActivity('Invalid weight. Transaction ignored.', 'warning');
          crossbeamsUtils.showError('There is no weight from the scale.');
          return;
        }
        const buttonIndex = event.target.dataset.buttonIndex;

        let url = event.target.dataset.buttonActionUrl;
        url = url.replace(/\$:card_reader\$/, '1');
        url = url.replace(/\$:identifier\$/, '123'); // STORED id?
        url = url.replace(/\$:weight\$/, scaleWeight.textcontent);
        // SCALE...

        scaleWeight.textContent = '.';
        scaleWeight.dataset.scaleReading = 'empty';

        fetch(url, {
          method: 'GET',
          credentials: 'same-origin',
          headers: new Headers({
            'X-Custom-Request-Type': 'Fetch',
          }),
        })
        .then((response) => {
          if (response.status === 200) {
            return response.json();
          }
          throw new HttpError(response);
        })
        .then((data) => {
          if (data.actions) {
            this.processActions(data.actions);
          }
          if (data.flash) {
            if (data.flash.notice) {
              deviceStore.button_stats[buttonIndex] += 1;
              crossbeamsLocalStorage.setItem(device, deviceStore);
              recalcStats();
              logActivity(data.flash.notice);
              crossbeamsUtils.showSuccess(data.flash.notice);
            }
            if (data.flash.warning) {
              logActivity(data.flash.warning, 'warning');
              crossbeamsUtils.showWarning(data.flash.warning);
            }
            if (data.flash.error) {
              logActivity(data.flash.error, 'error');
              if (data.exception) {
                crossbeamsUtils.showError(data.flash.error);
                if (data.backtrace) {
                  console.groupCollapsed('EXCEPTION:', data.exception, data.flash.error); // eslint-disable-line no-console
                  console.info('==Backend Backtrace=='); // eslint-disable-line no-console
                  console.info(data.backtrace.join('\n')); // eslint-disable-line no-console
                  console.groupEnd(); // eslint-disable-line no-console
                }
              } else {
                crossbeamsUtils.showError(data.flash.error);
              }
            }
          }
        }).catch((data) => {
          logActivity(data, 'error');
          crossbeamsUtils.fetchErrorHandler(data);
        });
      }, true);

      const fillLoginWidget = (payload) => {
        // if (payload.login_type === 'group' && deviceStore.loginKey == payload.login_key) {
        //   // Nothing actually changed.  ---> but need to show on 1st load...
        //   return;
        // }
        deviceStore.loginKey = payload.login_key;
        deviceStore.button_stats = Array(no_buttons).fill(0);
        deviceStore.no_packers = payload.users.length;
        crossbeamsLocalStorage.setItem(device, deviceStore);

        const avatar_colours = ['#f2b736', '#c5523f', '#499255', '#1875e5', '#E7040F', '#FF4136', '#5E2CA5', '#D5008F', '#001B44', '#137752', '#19A974'];
        const loginWidget = document.getElementById('robotLoginWidget');
        let splits = [];
        let init1 = '';
        let init2 = '';
        let bg = '';
        loginWidget.innerHTML = payload.users.map(u => {
          splits = u.split(' ');
          init1 = (splits[0][0] || '').toUpperCase();
          init2 = ((splits[1] && splits[1][0]) || '').toUpperCase();
          bg = avatar_colours[(init1.charCodeAt() + init2.charCodeAt()) % avatar_colours.length];
          return `<div>
            <?xml version="1.0" encoding="UTF-8"?>
            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 50 50">
              <rect width="100%" height="100%" fill="${bg}"/>
              <text fill="#fff" font-family="Helvetica,Arial,sans-serif" font-size="26" font-weight="500" x="50%" y="55%" dominant-baseline="middle" text-anchor="middle">
                ${init1}${init2}
              </text>
            </svg>
            <div>
            ${splits[0]}
            </div>
          </div>`
        }).join(' ');
      };

      const loginWidgetRefresh = (initialLogin) => {
        const url = `/messcada/browser/login_status/${device}`
              // fetch login state for device
        fetch(url, {
          method: 'GET',
          credentials: 'same-origin',
          headers: new Headers({
            'X-Custom-Request-Type': 'Fetch',
          }),
        })
        .then((response) => {
          if (response.status === 200) {
            return response.json();
          }
          throw new HttpError(response);
        })
        .then((data) => {
          if (data.success) {
            // replace login widget & enable buttons
            if (!initialLogin) { crossbeamsUtils.showSuccess(data.message) };
            fillLoginWidget(data.payload);
            // Refresh login widget...
          } else {
                  // replace login widget with blank & disable all actions
            crossbeamsUtils.showWarning(data.message);
          }
          // if (data.actions) {
          //   this.processActions(data.actions);
          // }
          if (data.flash) {
            if (data.flash.notice) {
              crossbeamsUtils.showSuccess(data.flash.notice);
            }
            if (data.flash.warning) {
              crossbeamsUtils.showWarning(data.flash.warning);
            }
            if (data.flash.error) {
              if (data.exception) {
                crossbeamsUtils.showError(data.flash.error);
                if (data.backtrace) {
                  console.groupCollapsed('EXCEPTION:', data.exception, data.flash.error); // eslint-disable-line no-console
                  console.info('==Backend Backtrace=='); // eslint-disable-line no-console
                  console.info(data.backtrace.join('\n')); // eslint-disable-line no-console
                  console.groupEnd(); // eslint-disable-line no-console
                }
              } else {
                crossbeamsUtils.showError(data.flash.error);
              }
            }
          }
        }).catch((data) => {
          logActivity(data, 'error');
          crossbeamsUtils.fetchErrorHandler(data);
        });
      };

      const scaleHandler = (weight) => {
        console.log('Scale:', weight);
        scaleWeight.textContent = weight;
        scaleWeight.dataset.scaleReading = 'filled';
      };

      const loginHandler = (cardReader, identifier) => {
        // console.log('Login:', cardReader, identifier);
        const url = `/messcada/hr/logon?device=${device}&card_reader=${cardReader}&identifier=${identifier}`
        // Login via fetch & update
        fetch(url, {
          method: 'GET',
          credentials: 'same-origin',
          headers: new Headers({
            'X-Custom-Request-Type': 'Fetch',
          }),
        })
        .then((response) => {
          if (response.status === 200) {
            return response.json();
          }
          throw new HttpError(response);
        })
        .then((data) => {
          if (data.success) {
            crossbeamsUtils.showSuccess(data.message);
            loginWidgetRefresh();
            // Refresh login widget...
          } else {
            crossbeamsUtils.showWarning(data.message);
          }
          // if (data.actions) {
          //   this.processActions(data.actions);
          // }
          if (data.flash) {
            if (data.flash.notice) {
              crossbeamsUtils.showSuccess(data.flash.notice);
            }
            if (data.flash.warning) {
              crossbeamsUtils.showWarning(data.flash.warning);
            }
            if (data.flash.error) {
              if (data.exception) {
                crossbeamsUtils.showError(data.flash.error);
                if (data.backtrace) {
                  console.groupCollapsed('EXCEPTION:', data.exception, data.flash.error); // eslint-disable-line no-console
                  console.info('==Backend Backtrace=='); // eslint-disable-line no-console
                  console.info(data.backtrace.join('\n')); // eslint-disable-line no-console
                  console.groupEnd(); // eslint-disable-line no-console
                }
              } else {
                crossbeamsUtils.showError(data.flash.error);
              }
            }
          }
        }).catch((data) => {
          logActivity(data, 'error');
          crossbeamsUtils.fetchErrorHandler(data);
        });
      };

      window.addEventListener('DOMContentLoaded', function() {
        // Highlight label text for the input that gets autofocus.
        const afi = document.querySelector('input[autofocus]');
        const prev = afi && afi.parentNode && afi.parentNode.previousElementSibling;
        if (prev instanceof HTMLTableCellElement) { prev.classList.add('focusLabel'); }

        crossbeamsRmdScan.init(<%= AppConst::BARCODE_SCAN_RULES.to_json %>, <%= @bypass_rules ? true : false %>, loginHandler, scaleHandler);
        // loginWidgetRefresh(<%= @robot_page.instance[:users] %>);
        loginWidgetRefresh(true);
        recalcStats();
      });
    </script>
    <%= content_for :late_javascript %>
  </body>
</html>
